{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josem\\\\OneDrive\\\\Desktop\\\\projects\\\\Custom-Commentary\\\\client\\\\src\\\\App.js\";\n// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    this.getDataFromDb = () => {\n      fetch('http://localhost:3001/api/getData').then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post('http://localhost:3001/api/putData', {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete('http://localhost:3001/api/deleteData', {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post('http://localhost:3001/api/updateData', {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, \"Hello World!\"));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Josem/OneDrive/Desktop/projects/Custom-Commentary/client/src/App.js"],"names":["React","Component","axios","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["// /client/App.js\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass App extends Component {\r\n    // initialize our state\r\n    state = {\r\n        data: [],\r\n        id: 0,\r\n        message: null,\r\n        intervalIsSet: false,\r\n        idToDelete: null,\r\n        idToUpdate: null,\r\n        objectToUpdate: null,\r\n    };\r\n\r\n    // when component mounts, first thing it does is fetch all existing data in our db\r\n    // then we incorporate a polling logic so that we can easily see if our db has\r\n    // changed and implement those changes into our UI\r\n    componentDidMount() {\r\n        this.getDataFromDb();\r\n        if (!this.state.intervalIsSet) {\r\n            let interval = setInterval(this.getDataFromDb, 1000);\r\n            this.setState({ intervalIsSet: interval });\r\n        }\r\n    }\r\n\r\n    // never let a process live forever\r\n    // always kill a process everytime we are done using it\r\n    componentWillUnmount() {\r\n        if (this.state.intervalIsSet) {\r\n            clearInterval(this.state.intervalIsSet);\r\n            this.setState({ intervalIsSet: null });\r\n        }\r\n    }\r\n\r\n    // just a note, here, in the front end, we use the id key of our data object\r\n    // in order to identify which we want to Update or delete.\r\n    // for our back end, we use the object id assigned by MongoDB to modify\r\n    // data base entries\r\n\r\n    // our first get method that uses our backend api to\r\n    // fetch data from our data base\r\n    getDataFromDb = () => {\r\n        fetch('http://localhost:3001/api/getData')\r\n            .then((data) => data.json())\r\n            .then((res) => this.setState({ data: res.data }));\r\n    };\r\n\r\n    // our put method that uses our backend api\r\n    // to create new query into our data base\r\n    putDataToDB = (message) => {\r\n        let currentIds = this.state.data.map((data) => data.id);\r\n        let idToBeAdded = 0;\r\n        while (currentIds.includes(idToBeAdded)) {\r\n            ++idToBeAdded;\r\n        }\r\n\r\n        axios.post('http://localhost:3001/api/putData', {\r\n            id: idToBeAdded,\r\n            message: message,\r\n        });\r\n    };\r\n\r\n    // our delete method that uses our backend api\r\n    // to remove existing database information\r\n    deleteFromDB = (idTodelete) => {\r\n        parseInt(idTodelete);\r\n        let objIdToDelete = null;\r\n        this.state.data.forEach((dat) => {\r\n            if (dat.id == idTodelete) {\r\n                objIdToDelete = dat._id;\r\n            }\r\n        });\r\n\r\n        axios.delete('http://localhost:3001/api/deleteData', {\r\n            data: {\r\n                id: objIdToDelete,\r\n            },\r\n        });\r\n    };\r\n\r\n    // our update method that uses our backend api\r\n    // to overwrite existing data base information\r\n    updateDB = (idToUpdate, updateToApply) => {\r\n        let objIdToUpdate = null;\r\n        parseInt(idToUpdate);\r\n        this.state.data.forEach((dat) => {\r\n            if (dat.id == idToUpdate) {\r\n                objIdToUpdate = dat._id;\r\n            }\r\n        });\r\n\r\n        axios.post('http://localhost:3001/api/updateData', {\r\n            id: objIdToUpdate,\r\n            update: { message: updateToApply },\r\n        });\r\n    };\r\n\r\n    // here is our UI\r\n    // it is easy to understand their functions when you\r\n    // see them render into our screen\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Hello World!</h1>\r\n            </div>\r\n          );\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}